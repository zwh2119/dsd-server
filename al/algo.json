{
    "gru": {
        "name": "gru",
        "display": "GRU",
        "desc": "Gated recurrent units (GRUs) are a gating mechanism in recurrent neural networks, introduced in 2014 by Kyunghyun Cho et al. The GRU is like a long short-term memory (LSTM) with a forget gate, but has fewer parameters than LSTM, as it lacks an output gate. GRU's performance on certain tasks of polyphonic music modeling, speech signal modeling and natural language processing was found to be similar to that of LSTM.GRUs have been shown to exhibit better performance on certain smaller and less frequent datasets.",
        "base": "$ALGO/RNN/base.pt",
        "entrypoint": {
            "train": ["/usr/bin/env", "python3", "$ALGO/RNN/train.py"],
            "predict": ["/usr/bin/env", "python3", "$ALGO/RNN/predict.py"]
        }
    },
    "naivebayes": {
        "name": "naivebayes",
        "display": "NaiveBayes",
        "desc": "Naive Bayes is a simple technique for constructing classifiers: models that assign class labels to problem instances, represented as vectors of feature values, where the class labels are drawn from some finite set. There is not a single algorithm for training such classifiers, but a family of algorithms based on a common principle: all naive Bayes classifiers assume that the value of a particular feature is independent of the value of any other feature, given the class variable. For example, a fruit may be considered to be an apple if it is red, round, and about 10 cm in diameter. A naive Bayes classifier considers each of these features to contribute independently to the probability that this fruit is an apple, regardless of any possible correlations between the color, roundness, and diameter features.",
        "base": "$ALGO/NaiveBayes/base.pt",
        "entrypoint": {
            "train": ["/usr/bin/env", "python3", "$ALGO/NaiveBayes/train.py"],
            "predict": ["/usr/bin/env", "python3", "$ALGO/NaiveBayes/predict.py"]
        }
    },
    "knn": {
        "name": "knn",
        "display": "KNN",
        "desc": " ",
        "base": "$ALGO/KNN/base.pt",
        "entrypoint": {
            "train": ["/usr/bin/env", "python3", "$ALGO/KNN/train.py"],
            "predict": ["/usr/bin/env", "python3", "$ALGO/KNN/predict.py"]
        }
    },
    "svm": {
        "name": "svm",
        "display": "SVM",
        "desc": " ",
        "base": "$ALGO/SVM/base.pt",
        "entrypoint": {
            "train": ["/usr/bin/env", "python3", "$ALGO/SVM/train.py"],
            "predict": ["/usr/bin/env", "python3", "$ALGO/SVM/predict.py"]
        }
    },
    "randomforest": {
        "name": "randomforest",
        "display": "RandomForest",
        "desc": " ",
        "base": "$ALGO/RandomForest/base.pt",
        "entrypoint": {
            "train": ["/usr/bin/env", "python3", "$ALGO/RandomForest/train.py"],
            "predict": ["/usr/bin/env", "python3", "$ALGO/RandomForest/predict.py"]
        }
    },
    "decisiontree": {
        "name": "decisiontree",
        "display": "DecisionTree",
        "desc": " ",
        "base": "$ALGO/DecisionTree/base.pt",
        "entrypoint": {
            "train": ["/usr/bin/env", "python3", "$ALGO/DecisionTree/train.py"],
            "predict": ["/usr/bin/env", "python3", "$ALGO/DecisionTree/predict.py"]
        }
    }
}